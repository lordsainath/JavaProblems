1.reverse a string
  - create a empty string and loop until the length-1 starting from 0 and then add the char from end to new empty string

2.reverse a string word without changing the order
 -create a empty string then split the sentence into the words using split [ ] and store it in an array then loop through an array and create an empty string into it loop through each word
  and reverse it and after the inner loop ends add the reversed word into the first empty string with spaces.

3.Check Palindrome
 -first make Boolean as true and then loop starting from 0 till half size of the string length and in the if statement 	we are checking the values from starring and ending are not equal if 
  any match found it will break the loop and return the result.

4. count the words in string
 - first we have to store the string words into an array using split before that we have to remover the trailing spaces using trim and then crate a counter variable and loops through words and array and increase the counter and after that return the count (we can directly count using array method which is length)

5.count the vowels in a string
 - first create a count variable and then convert the string into lowercase then loops from 0 till length-1 and then add the char into char variable and check in the if statement that char is vowel or not using or operator.

6.Find the First Non-Repeating Character
 -loops through each char of a string store it in a char and create a Boolean for isrepeat and then one more time loop through the string for each character and compare the outer loop  char with all the new characters and  if char is found repeat break the loop and if not return the result.

7.Check Palindrome of number
 -first we have to stroe the number into new var which will be original num also create reversernum with 0 after that use while loop to extract the digit then store it in revesenum using operation and then divide the num by 10 to remover the last digit this will continue till num = 0;after that check revesrsenum is equal to original num.

 8.Check for Anagrams
  - first we have to check the length of the two strins is it is not equal it will not check further.after that we have to create an int array which will store the frequncy of each character in a string for right now we are just checking the string in lowercase that's why we are just taking the array size of 26.after that loop through each string and add the string charcter index size to freq array using [ch - 'a'] this formula convert the char to index and after that we are incrementing the size.after successfull adding of two freq array we loop thorugh each index size of both array and if they did not match we stop the program and if they are same we return the string is anagram.


9.Find the Most Frequent Character


Remove Duplicates from a String
Replace Spaces with a Specific Character

